{
  "AbstractFactory": {
    "prefix": "bm:design-patterns:abstract-factory",
    "body": [
      "interface AbstractWidget {",
      "  perform(): void;",
      "}",
      "",
      "interface WidgetFactory {",
      "  createWidget(): AbstractWidget;",
      "}",
      "",
      "class WidgetA implements AbstractWidget {",
      "  perform(): void {",
      "    console.log('Widget A operation');",
      "  }",
      "}",
      "",
      "class WidgetB implements AbstractWidget {",
      "  perform(): void {",
      "    console.log('Widget B operation');",
      "  }",
      "}",
      "",
      "class WidgetFactoryA implements WidgetFactory {",
      "  createWidget(): AbstractWidget {",
      "    return new WidgetA();",
      "  }",
      "}",
      "",
      "class WidgetFactoryB implements WidgetFactory {",
      "  createWidget(): AbstractWidget {",
      "    return new WidgetB();",
      "  }",
      "}",
      "",
      "class WidgetProducer {",
      "  private factory: WidgetFactory;",
      "  constructor(factory: WidgetFactory) {",
      "    this.factory = factory;",
      "  }",
      "",
      "  produce(): void {",
      "    const widget = this.factory.createWidget();",
      "    widget.perform();",
      "  }",
      "}",
      "",
      "const producerA = new WidgetProducer(new WidgetFactoryA());",
      "producerA.produce();",
      "",
      "const producerB = new WidgetProducer(new WidgetFactoryB());",
      "producerB.produce();"
    ],
    "description": "Create an abstract factory"
  }
}
