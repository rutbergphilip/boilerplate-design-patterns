{
  "AbstractFactory": {
    "prefix": "design-patterns:abstract-factory",
    "body": [
      "interface ${1:AbstractWidget} {",
      "  ${2:perform}(): void;",
      "}",
      "",
      "interface ${5:WidgetFactory} {",
      "  ${6:createWidget}(): ${1:AbstractWidget};",
      "}",
      "",
      "class ${3:WidgetA} implements ${1:AbstractWidget} {",
      "  ${2:perform}(): void {",
      "    console.log('Widget A operation');",
      "  }",
      "}",
      "",
      "class ${4:WidgetB} implements ${1:AbstractWidget} {",
      "  ${2:perform}(): void {",
      "    console.log('Widget B operation');",
      "  }",
      "}",
      "",
      "class ${7:FactoryA} implements ${5:WidgetFactory} {",
      "  ${6:createWidget}(): ${1:AbstractWidget} {",
      "    return new ${3:WidgetA}();",
      "  }",
      "}",
      "",
      "class ${8:FactoryB} implements ${5:WidgetFactory} {",
      "  ${6:createWidget}(): ${1:AbstractWidget} {",
      "    return new ${4:WidgetB}();",
      "  }",
      "}",
      "",
      "class ${9:Producer} {",
      "  private ${10:factory}: ${5:WidgetFactory};",
      "  constructor(${10:factory}: ${5:WidgetFactory}) {",
      "    this.${10:factory} = ${10:factory};",
      "  }",
      "",
      "  ${11:produce}(): void {",
      "    const ${12:widget} = this.${10:factory}.${6:createWidget}();",
      "    ${12:widget}.${2:perform}();",
      "  }",
      "}",
      "",
      "const ${13:producerA} = new ${9:Producer}(new ${7:FactoryA}());",
      "${13:producerA}.${11:produce}();",
      "",
      "const ${14:producerB} = new ${9:Producer}(new ${8:FactoryB}());",
      "${14:producerB}.${11:produce}();"
    ],
    "description": "Create an abstract factory"
  }
}
